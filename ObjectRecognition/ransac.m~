function bestTform = ransac(confidence, inlierErrorThreshold, numIterations, matchMatrix, f1, f2)
% Uses RANSAC to find a suitable affineTform model for given matching data

    % Start with identity model and computer no of inliers.
    bestTform = affine2d();
    [bestInlierCount, bestError] = computeStats(inlierErrorThreshold, ...
        bestTform, matchMatrix, f1, f2)
    
    % Iteratively update best model.
    for (iter = 1:1)
        [templatePoints, scenePoints] = sampleMatches(matchMatrix, f1, f2)
        curTform = fitgeotrans(templatePoints, scenePoints, 'affine');
        [curInlierCount, error] = computeStats(inlierErrorThreshold, curTform, matchMatrix, f1, f2);  
    end
end

function [templatePoints, scenePoints] = sampleMatches(matchMatrix, f1, f2)
% Samples 3 random point matches from matchMatrix without replacement and 
% returns x,y coordinates of thrit corresponding template and scenePoints.
%     [templateIdx, idx] = datasample(matchMatrix(1, :), 3, 'Replace', false)
%     sceneIdx = matchMatrix(2, idx)
%     templatePoints = f1(1:2, templateIdx)'
%     scenePoints = f2(1:2, sceneIdx)'
    indices = datasample(1:size(matchMatrix, 2), 3, 'Replace', false)
    [templatePoints, scenePoints] = getMatchingPoints(indices, matchMatrix, f1, f2)
end

function [inlierCount, error] = computeStats(inlierErrorThreshold, tform, matchMatrix, f1, f2)
% Computes the inlierCount and error for passed transformation model
    inlierCount = 0;
    error = 0;
    for (idx = 1:size(matchMatrix, 2)) 
        [templatePoint, scenePoint] = getMatchingPoints(idx, matchMatrix, f1, f2)
        [x, y] =  transformPointsForward(tform, templatePoint(1), templatePoint(2))
        terror = pdist2(transformedPoint, scenePoint, 'euclidean')
        if (terror < inlierErrorThreshold)
            inlierCount = inclierCount + 1
        end
        error = error + terror
    end
end

function [templatePoints, scenePoints] = getMatchingPoints(indices, matchMatrix, f1, f2)
    templateIdx = matchMatrix(1, indices);
    sceneIdx = matchMatrix(2, indices);
    templatePoints = f1(1:2, templateIdx)';
    scenePoints = f2(1:2, sceneIdx)';
end
